#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################


#*** Log File Name
cConfigDim = '}tp_config';
If (DimensionExists(cConfigDim) = 1);
	cGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');
Else;
	cGenerateLog = 'N';
EndIf;

cTM1Process = GetProcessName();
StringGlobalVariable('gPrologLog');
StringGlobalVariable('gEpilogLog');
StringGlobalVariable('gDataLog');

IF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');
	vReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,
	'pProcess', cTM1Process, 'pControl', 'Y');
	If (vReturnValue <> ProcessExitNormal());
		ProcessError;
	EndIf;
EndIf;

cPrologLog = gPrologLog;
cEpilogLog = gEpilogLog;
cDataLog = gDataLog;
cTM1Log = cPrologLog;
#***
cApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');
cApprovalSubset =  ATTRS('}tp_applications', pAppId,  'ApprovalSubset');
cControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');
cControlDimOld = ATTRS('}tp_applications', pAppId,  'VersionDimensionOld');

cWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');
cWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');
cReadableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesReadOld');
cReadableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesRead');

#*** Check if a new version dimension is added.
seIsNewVersionDimensionAdded = 'N';
IF (cControlDimOld @='' & cControlDim @<> '');
seIsNewVersionDimensionAdded = 'Y';
Endif;

#if a new version dimension is added, we need to recreate security overlay cubes with added dimension
IF (seIsNewVersionDimensionAdded @= 'Y');
	vReturnValue = ExecuteProcess('}tp_update_application_cubes_pre', 'pExecutionId', pExecutionId, 'pAppId', pAppId);
	If (vReturnValue <> ProcessExitNormal());
		ProcessError;
	EndIf;
Endif;

cApplicationCubesCube = '}tp_application_cubes';
totalCubes = DIMSIZ('}Cubes');
indexCube = 1;

While (indexCube <= totalCubes);
	cCubeName = DIMNM('}Cubes', indexCube);
	cIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);
	If (cIsAppCube @= 'A');

		IF (seIsNewVersionDimensionAdded @= 'Y');
			#IF a new version demension is added, we need to remove all DRs from the data cube
			vDimIndex = 1;
			vAddress = '';
			vDimension = TABDIM(cCubeName, vDimIndex);
			While (vDimension @<> '');
				If (vDimIndex = 1);
					vAddress = '';
				Else;
					vAddress = vAddress |  '|';
				Endif;
				vDimIndex = vDimIndex +1;
				vDimension = TABDIM(cCubeName, vDimIndex);
			End;
			CubeDataReservationReleaseAll(cCubeName,'',vAddress);

		Endif;

		IF (seIsNewVersionDimensionAdded @= 'N' & cControlDim @<> '' & (cWritableSlicesOld @='' & cReadableSlicesOld @=''));
			#This is an initial rights saving, do nothing here
		Else;
			IF (cWritableSlicesOld @<> cWritableSlicesNew);
				vReturnValue = ExecuteProcess('}tp_update_application_DR', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);
				If (vReturnValue <> ProcessExitNormal());
					ProcessError;
				EndIf;

				#update security overlay cube with new writable slices
				vReturnValue = ExecuteProcess('}tp_update_application_securityOverlay', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);
				If (vReturnValue <> ProcessExitNormal());
					ProcessError;
				EndIf;
			Endif;
		Endif;
	EndIf;

	indexCube = indexCube +1;
End;


#*** No error

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, 'The end has been reached.');
EndIf;
#endregion