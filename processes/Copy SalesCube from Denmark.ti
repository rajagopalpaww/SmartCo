#region Prolog


#@@IDENTIFIER=Copy SalesCube from Denmark
#@@DEPENDENCY[View]=[SalesCube]->[Copy SalesCube from Denmark (source) 1428595087452]
#@@DEPENDENCY[Subset]=[actvsbud]->[Copy SalesCube from Denmark 1428595087468]
#@@DEPENDENCY[Subset]=[region]->[Copy SalesCube from Denmark 1428595087483]
#@@DEPENDENCY[Subset]=[model]->[Copy SalesCube from Denmark 1428595087499]
#@@DEPENDENCY[Subset]=[account1]->[Copy SalesCube from Denmark 1428595087514]
#@@DEPENDENCY[Subset]=[month]->[Copy SalesCube from Denmark 1428595087530]
#@@DEPENDENCY[Dimension]=[}Copy SalesCube from Denmark (source map actvsbud) 1428595087561]
#@@DEPENDENCY[Dimension]=[}Copy SalesCube from Denmark (source map region) 1428595087577]
#@@DEPENDENCY[Dimension]=[}Copy SalesCube from Denmark (target selection region) 1428595087593]
#@@DEPENDENCY[Cube]=[}Copy SalesCube from Denmark (mapping cube region) 1428595087639]
#@@DEPENDENCY[Dimension]=[}Copy SalesCube from Denmark (source map account1) 1428595087702]


OnMinorErrorDoItemSkip=0;
NumericGlobalVariable('DataMinorErrorCount');
MinorErrorLogMax=100;

#For use in generating per-run unique object names
uniqueRunSuffix = TM1User() | '.' | NumberToString( NOW );
#Check for illegal characters that may cause naming problems
stripChrs = '"'':/\=, *';
stripChr = SUBST(stripChrs, 1, 1);
stripChrs = DELET(stripChrs, 1, 1);
WHILE ( LONG(stripChr) > 0 );
  stripChrIdx = SCAN(stripChr, uniqueRunSuffix);
  WHILE ( stripChrIdx > 0 );
    uniqueRunSuffix = DELET(uniqueRunSuffix, stripChrIdx, 1);
    stripChrIdx = SCAN(stripChr, uniqueRunSuffix);
  END;
  stripChr = SUBST(stripChrs, 1, 1);
  stripChrs = DELET(stripChrs, 1, 1);
END;


#Create per-run Source View for this link process
varRunSrcViewName = '}TITmp.source.' | uniqueRunSuffix;
ViewCreate('SalesCube', varRunSrcViewName );
ViewRowDimensionSet('SalesCube', varRunSrcViewName, 'model', 1 );
IF ( (P1 @= '') );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'model', 'Copy SalesCube from Denmark 1428595087499' );
ELSEIF ( (SUBST( P1, 1, 7) @= 'subset:') );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'model', SUBST( P1, 8, LONG(P1)) );
ELSEIF ( 1 = 1 );
  var1SourceViewSubset = varRunSrcViewName;
  SubsetCreate('model', var1SourceViewSubset );
  SubsetElementInsert('model', var1SourceViewSubset, P1, 1 );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'model', var1SourceViewSubset );
ENDIF;
ViewRowDimensionSet('SalesCube', varRunSrcViewName, 'month', 2 );
IF ( (P2 @= '') );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'month', 'Copy SalesCube from Denmark 1428595087530' );
ELSEIF ( (SUBST( P2, 1, 7) @= 'subset:') );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'month', SUBST( P2, 8, LONG(P2)) );
ELSEIF ( 1 = 1 );
  var2SourceViewSubset = varRunSrcViewName;
  SubsetCreate('month', var2SourceViewSubset );
  SubsetElementInsert('month', var2SourceViewSubset, P2, 1 );
  ViewSubsetAssign('SalesCube', varRunSrcViewName, 'month', var2SourceViewSubset );
ENDIF;
ViewRowDimensionSet('SalesCube', varRunSrcViewName, 'actvsbud', 3 );
ViewSubsetAssign('SalesCube', varRunSrcViewName, 'actvsbud', 'Copy SalesCube from Denmark 1428595087468' );
ViewRowDimensionSet('SalesCube', varRunSrcViewName, 'region', 4 );
ViewSubsetAssign('SalesCube', varRunSrcViewName, 'region', 'Copy SalesCube from Denmark 1428595087483' );
ViewRowDimensionSet('SalesCube', varRunSrcViewName, 'account1', 5 );
ViewSubsetAssign('SalesCube', varRunSrcViewName, 'account1', 'Copy SalesCube from Denmark 1428595087514' );
DatasourceCubeview = varRunSrcViewName;

ViewExtractSkipCalcsSet( 'SalesCube', varRunSrcViewName, 0 );
ViewExtractSkipRuleValuesSet( 'SalesCube', varRunSrcViewName, 0 );
ViewExtractSkipZeroesSet( 'SalesCube', varRunSrcViewName, 1 );
OldCubeLogChanges = CUBEGETLOGCHANGES('SalesCube');
CUBESETLOGCHANGES('SalesCube', 0);

#Process zero out view
varRunTgtViewName = '}TITmp.target.' | uniqueRunSuffix;
ViewCreate( 'SalesCube', varRunTgtViewName );
ViewRowDimensionSet( 'SalesCube', varRunTgtViewName, 'actvsbud', 1 );
ViewRowDimensionSet( 'SalesCube', varRunTgtViewName, 'region', 2 );
ViewRowDimensionSet( 'SalesCube', varRunTgtViewName, 'model', 3 );
ViewRowDimensionSet( 'SalesCube', varRunTgtViewName, 'account1', 4 );
ViewRowDimensionSet( 'SalesCube', varRunTgtViewName, 'month', 5 );
var1TargetViewSubset = varRunTgtViewName;
SubsetCreate( 'actvsbud', var1TargetViewSubset );
SubsetElementInsert( 'actvsbud', var1TargetViewSubset, 'Actual', 1 );
SubsetElementInsert( 'actvsbud', var1TargetViewSubset, 'Budget', 2 );
ViewSubsetAssign( 'SalesCube', varRunTgtViewName, 'actvsbud', var1TargetViewSubset );
var2TargetViewSubset = varRunTgtViewName;
SubsetCreate( 'region', var2TargetViewSubset );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Charles John', 1 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Shruti A Lalan', 2 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Shuchi Bajpai', 3 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'John Lyons', 4 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Peter Thomas1', 5 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Andrei Ionescu', 6 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Richard Reynolds', 7 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Daniel Sivret', 8 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Ehab Teima', 9 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'David Corbett', 10 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Newton S Sun', 11 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Sean McDowell', 12 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Yanyan Gao', 13 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Jeyanthy Ajanthan', 14 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Paul Glennon', 15 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Siong Wong', 16 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Julia Hurst', 17 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'George Campbell', 18 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Usman Hayat', 19 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Charbel Abou-Khalil', 20 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Mike Sadler', 21 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Joanne Maxwell', 22 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Dmytro Hyshtymult', 23 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Varun Sharma', 24 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Tom Shackell', 25 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Paulo Monte', 26 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Richard Rodgers', 27 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Soufiane Azizi', 28 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Georgy Lago', 29 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Pavle Kovacevic', 30 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Kathleen Ryder', 31 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Brian Hirsch', 32 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'James Williams2', 33 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Amanpreet Singh', 34 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'John Owen', 35 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Ian Aitken', 36 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Aaron Zhang', 37 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Jason Reich', 38 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Robert Penney', 39 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Debra Pesek', 40 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Kelly C Olson', 41 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Ralph Doran', 42 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Matthew Lachance', 43 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Dominic Leung', 44 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Ravi p Arneja', 45 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Ariel Paulin', 46 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Reid N Gifford', 47 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'Dave Brons', 48 );
SubsetElementInsert( 'region', var2TargetViewSubset, 'John Runions', 49 );
ViewSubsetAssign( 'SalesCube', varRunTgtViewName, 'region', var2TargetViewSubset );
var3TargetViewSubset = varRunTgtViewName;
IF ( (P1 @= '') );
  SubsetCreateByMDX( var3TargetViewSubset, 'FILTER( [model].MEMBERS, ISLEAF( [model].CURRENTMEMBER ) )' );
ELSEIF ( (SUBST( P1, 1, 7) @= 'subset:') );
  var3TargetViewSubset = SUBST( P1, 8, LONG(P1));
ELSEIF ( 1 = 1 );
  SubsetCreate('model', var3TargetViewSubset );
  SubsetElementInsert('model', var3TargetViewSubset, P1, 1 );
ENDIF;
ViewSubsetAssign( 'SalesCube', varRunTgtViewName, 'model', var3TargetViewSubset );
var4TargetViewSubset = varRunTgtViewName;
SubsetCreate( 'account1', var4TargetViewSubset );
SubsetElementInsert( 'account1', var4TargetViewSubset, 'Units', 1 );
SubsetElementInsert( 'account1', var4TargetViewSubset, 'Variable Costs', 2 );
ViewSubsetAssign( 'SalesCube', varRunTgtViewName, 'account1', var4TargetViewSubset );
var5TargetViewSubset = varRunTgtViewName;
IF ( (P2 @= '') );
  SubsetCreateByMDX( var5TargetViewSubset, 'FILTER( [month].MEMBERS, ISLEAF( [month].CURRENTMEMBER ) )' );
ELSEIF ( (SUBST( P2, 1, 7) @= 'subset:') );
  var5TargetViewSubset = SUBST( P2, 8, LONG(P2));
ELSEIF ( 1 = 1 );
  SubsetCreate('month', var5TargetViewSubset );
  SubsetElementInsert('month', var5TargetViewSubset, P2, 1 );
ENDIF;
ViewSubsetAssign( 'SalesCube', varRunTgtViewName, 'month', var5TargetViewSubset );
ViewZeroOut( 'SalesCube', varRunTgtViewName );
ViewDestroy( 'SalesCube', varRunTgtViewName );
SubsetDestroy( 'actvsbud', var1TargetViewSubset );
SubsetDestroy( 'region', var2TargetViewSubset );
IF ( (P1 @= '')%(SUBST( P1, 1, 7) @<> 'subset:') );
  SubsetDestroy( 'model', var3TargetViewSubset );
ENDIF;
SubsetDestroy( 'account1', var4TargetViewSubset );
IF ( (P2 @= '')%(SUBST( P2, 1, 7) @<> 'subset:') );
  SubsetDestroy( 'month', var5TargetViewSubset );
ENDIF;

#endregion
#region Data


SkipUpdates=0;

IF ( (SkipUpdates<>1)&((DIMIX( '}Copy SalesCube from Denmark (source map actvsbud) 1428595087561', VSOURCE_0 ) = 0)) );
  SkipUpdates=1;
ENDIF;
IF ( (SkipUpdates<>1)&((DIMIX( '}Copy SalesCube from Denmark (source map region) 1428595087577', VSOURCE_1 ) = 0)) );
  SkipUpdates=1;
ENDIF;
IF ( (SkipUpdates<>1)&((DIMIX( '}Copy SalesCube from Denmark (source map account1) 1428595087702', VSOURCE_3 ) = 0)) );
  SkipUpdates=1;
ENDIF;

IF ( (SkipUpdates<>1) );
  
  #process complex mappings
  Index_3=0;
  WHILE ( Index_3 < 49 );
    Index_3 = Index_3 + 1;
    VSOURCE_1_DERIVED=CellGetS( '}Copy SalesCube from Denmark (mapping cube region) 1428595087639', VSOURCE_1, NumberToString(Index_3) );
    IF ( (VSOURCE_1_DERIVED @<> '') );
      
      #perform updates
      IF ( CellIsUpdateable( 'SalesCube', VSOURCE_0, VSOURCE_1_DERIVED, VSOURCE_2, VSOURCE_3, VSOURCE_4 ) = 1 );
        IF ( VALUE_IS_STRING = 1 );
          CellPutS( SVALUE, 'SalesCube', VSOURCE_0, VSOURCE_1_DERIVED, VSOURCE_2, VSOURCE_3, VSOURCE_4 );
        ELSEIF ( 1 = 1 );
          CellPutN( NVALUE, 'SalesCube', VSOURCE_0, VSOURCE_1_DERIVED, VSOURCE_2, VSOURCE_3, VSOURCE_4 );
        ENDIF;
      ENDIF;
      
    ENDIF;
  END;
ENDIF;

#endregion
#region Epilog


#Destroy per-run Source View / Subset for this regular link process
ViewDestroy( 'SalesCube', varRunSrcViewName );
IF ( (P1 @<> '')&(SUBST( P1, 1, 7) @<> 'subset:') );
  SubsetDestroy('model', var1SourceViewSubset );
ENDIF;
IF ( (P2 @<> '')&(SUBST( P2, 1, 7) @<> 'subset:') );
  SubsetDestroy('month', var2SourceViewSubset );
ENDIF;
CUBESETLOGCHANGES('SalesCube', OldCubeLogChanges);
#endregion