#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################

#*** Log File Name
cConfigDim = '}tp_config';
If (DimensionExists(cConfigDim) = 1);
	cGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');
Else;
	cGenerateLog = 'N';
EndIf;

cTM1Process = GetProcessName();
StringGlobalVariable('gPrologLog');
StringGlobalVariable('gEpilogLog');
StringGlobalVariable('gDataLog');

IF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');
vReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,
'pProcess', cTM1Process, 'pControl', 'Y');
If (vReturnValue <> ProcessExitNormal());
	ProcessError;
EndIf;
Endif;

cPrologLog = gPrologLog;
cEpilogLog = gEpilogLog;
cDataLog = gDataLog;
cTM1Log = cPrologLog;

#*** Log Parameters

If (cGenerateLog @= 'Y');
	TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'Parameters:',pExecutionId, pAppId);
EndIf;

#***
cIMApplicationDim = '}tp_intermediate_security_applications';
cIMMeasures = '}tp_intermediate_security_measures';
vIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;
cApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');
cApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');
vMultiThreads = StringToNumber(pMultiThreads);

#***
#delete the application subset that contains this application Id only
vTempAppSubset = 'temp_app_' | pAppId;
IF (SubsetExists(cIMApplicationDim, vTempAppSubset)>0);
	SubsetDestroy(cIMApplicationDim, vTempAppSubset);
Endif;

#***
#Delete the temp dimension that stores list of changed groups
IF (pIncremental @= 'Y');
	IF (DimensionExists(vIncrGroupDim) >0);
		DimensionDestroy(vIncrGroupDim);
	Endif;
Endif;

#***
#delete group subset that contains groups in the vIncrGroupDim
IF (pIncremental @= 'Y');
	vTempGroupSubset = 'temp_group_' | pAppId;
	vGroupsControlDim = '}Groups';
	IF (SubsetExists(vGroupsControlDim, vTempGroupSubset)>0);
		SubsetDestroy(vGroupsControlDim, vTempGroupSubset);
	Endif;
Endif;

#***
if (vMultiThreads >1);
looper = 1;
	While (looper <= vMultiThreads);
		vSubsetName = 'update_thread' | numberToString(looper);

		IF (SubsetExists(cApprovalDim, vSubsetName) >0);
			SubsetDestroy(cApprovalDim, vSubsetName);
		Endif;
		looper = looper +1;
	End;
Endif;

#***
#endregion