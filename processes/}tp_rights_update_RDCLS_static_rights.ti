#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################

#****String Caching Workaround
#This TI can be removed once String cache is implemented on TM1

#****

cIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;
cGroupsDim = pGroupsDim;
cAllApplications = 'all_applications';

versionIndex = 0;
approvalIndex = 0;
dimensionIndex = 1;
While (dimensionIndex > 0 ); 
	cCubeDimensionName = TABDIM(pCube, dimensionIndex);
	If (cCubeDimensionName @= '');
		dimensionIndex = -1;
	Else;
		IF (cCubeDimensionName @=pVersionDim);
			versionIndex = dimensionIndex;
		Endif;
				
		IF (cCubeDimensionName @= pApprovalDim );
			approvalIndex =dimensionIndex ;
		Endif;

	EndIf;

	dimensionIndex = dimensionIndex + 1;
End;

IF (versionIndex < approvalIndex);
	versionFirst = 'Y';
Endif;

#*Update RD cell security cubes
IF (CubeExists(cIMRDCLSCube) >0);
vTotalGroups = DIMSIZ(cGroupsDim);
vGroupLooper = 1;
While (vGroupLooper <= vTotalGroups);
	vGroup = DIMNM(cGroupsDim, vGroupLooper);

	vTotalNodes = SubsetGetSize(pApprovalDim, pUpdateSubset);
	vNodeLooper = 1;
	While (vNodeLooper <= vTotalNodes);
		vApprovalNode = SubsetGetElementName(pApprovalDim, pUpdateSubset, vNodeLooper);
		vFinalCellSecurity ='NONE';

		IF (versionIndex >0);
			vTotalVersions = DIMSIZ(pVersionDim);
			vVersionLooper = 1;
			While (vVersionLooper <= vTotalVersions);
				vVersion = DIMNM(pVersionDim, vVersionLooper);
				IF (approvalIndex >0)	;	
					IF (versionFirst @= 'Y');
						vFinalCellSecurity=CellGetS(cIMRDCLSCube, vVersion, vApprovalNode, vGroup,cAllApplications,'Rights' );
						vCurrentCellSecurity = CellGetS(cIMRDCLSCube, vVersion, vApprovalNode,vGroup,cAllApplications, 'StaticRights');
						IF (vFinalCellSecurity @<> vCurrentCellSecurity);
							CellPutS(vFinalCellSecurity, cIMRDCLSCube, vVersion, vApprovalNode,vGroup,cAllApplications, 'StaticRights');
						Endif;
						
					Else;
						vFinalCellSecurity=CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications, 'Rights' );
						vCurrentCellSecurity = CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications, 'StaticRights');
						IF (vFinalCellSecurity @<> vCurrentCellSecurity);
							CellPutS(vFinalCellSecurity, cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications,'StaticRights');
						Endif;
					Endif;
				Else;
					vFinalCellSecurity=CellGetS(cIMRDCLSCube,vVersion, vGroup,cAllApplications, 'Rights' );
					vCurrentCellSecurity = CellGetS(cIMRDCLSCube,vVersion, vGroup,cAllApplications,'StaticRights' );
					IF (vFinalCellSecurity @<>vCurrentCellSecurity);
						CellPutS(vFinalCellSecurity, cIMRDCLSCube,vVersion, vGroup,cAllApplications, 'StaticRights');
					Endif;
				Endif;
				vVersionLooper = vVersionLooper +1;
			End;

		ElseIf (versionIndex = 0 & approvalIndex >0);
			vFinalCellSecurity=CellGetS(cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'Rights' );
			vCurrentCellSecurity = CellGetS(cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'StaticRights');
			IF (vFinalCellSecurity @<>vCurrentCellSecurity);
				CellPutS(vFinalCellSecurity, cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'StaticRights');
			Endif;
		Endif;
		vNodeLooper = vNodeLooper  +1;		
	End;
	vGroupLooper = vGroupLooper +1;
End;

Endif;
#endregion