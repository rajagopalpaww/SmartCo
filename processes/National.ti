#region Prolog

#****Begin: Generated Header****
IMPORT_Cube_Created=0;
if (param_destroy = 1);
   CubeDestroy('NATIONAL IOD2');
   DimensionDestroy('Product Line');
   DimensionDestroy('Product Item Name');
   DimensionDestroy('Outlet');
   DimensionDestroy('Market');
   DimensionDestroy('NATIONAL IOD2.measures');
   if (param_createIfNotExist = 0);
      ProcessQuit;
   endif;
endif;
if (param_createIfNotExist = 1);
   if (0 = DimensionExists('Product Line'));
      DimensionCreate('Product Line');
      AttrInsert('Product Line', '', 'Caption', 'A');
      CellPutS('GENERIC', '}DimensionAttributes', 'Product Line', 'DIMENSION_TYPE');
      AttrInsert('Product Line', '', 'Format', 'S');
      AttrInsert('Product Line', '', 'Picklist', 'S');
      AttrInsert('Product Line', '', 'calculation', 'S');
      AttrInsert('Product Line', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[Product Line].MEMBERS', 'Product Line');
   endif;
   if (0 = DimensionExists('Product Item Name'));
      DimensionCreate('Product Item Name');
      AttrInsert('Product Item Name', '', 'Caption', 'A');
      CellPutS('GENERIC', '}DimensionAttributes', 'Product Item Name', 'DIMENSION_TYPE');
      AttrInsert('Product Item Name', '', 'Format', 'S');
      AttrInsert('Product Item Name', '', 'Picklist', 'S');
      AttrInsert('Product Item Name', '', 'calculation', 'S');
      AttrInsert('Product Item Name', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[Product Item Name].MEMBERS', 'Product Item Name');
   endif;
   ATTRINSERT('Product Item Name', '', 'Caption', 'A');
   if (0 = DimensionExists('Outlet'));
      DimensionCreate('Outlet');
      AttrInsert('Outlet', '', 'Caption', 'A');
      CellPutS('GENERIC', '}DimensionAttributes', 'Outlet', 'DIMENSION_TYPE');
      AttrInsert('Outlet', '', 'Format', 'S');
      AttrInsert('Outlet', '', 'Picklist', 'S');
      AttrInsert('Outlet', '', 'calculation', 'S');
      AttrInsert('Outlet', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[Outlet].MEMBERS', 'Outlet');
   endif;
   if (0 = DimensionExists('Market'));
      DimensionCreate('Market');
      AttrInsert('Market', '', 'Caption', 'A');
      CellPutS('GENERIC', '}DimensionAttributes', 'Market', 'DIMENSION_TYPE');
      AttrInsert('Market', '', 'Format', 'S');
      AttrInsert('Market', '', 'Picklist', 'S');
      AttrInsert('Market', '', 'calculation', 'S');
      AttrInsert('Market', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[Market].MEMBERS', 'Market');
   endif;
   if (0 = DimensionExists('NATIONAL IOD2.measures'));
      DimensionCreate('NATIONAL IOD2.measures');
      AttrInsert('NATIONAL IOD2.measures', '', 'Caption', 'A');
      CellPutS('CALCULATION', '}DimensionAttributes', 'NATIONAL IOD2.measures', 'DIMENSION_TYPE');
      AttrInsert('NATIONAL IOD2.measures', '', 'Format', 'S');
      AttrInsert('NATIONAL IOD2.measures', '', 'Picklist', 'S');
      AttrInsert('NATIONAL IOD2.measures', '', 'signswitch', 'N');
      AttrInsert('NATIONAL IOD2.measures', '', 'calculation', 'S');
      AttrInsert('NATIONAL IOD2.measures', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[NATIONAL IOD2.measures].MEMBERS', 'NATIONAL IOD2.measures');
   endif;
   if (0 = CubeExists('NATIONAL IOD2'));
      CubeCreate('NATIONAL IOD2', 'Product Line', 'Product Item Name', 'Outlet', 'Market', 'NATIONAL IOD2.measures');
      IMPORT_Cube_Created=1;
      CubeSetLogChanges('NATIONAL IOD2', 1);
      CellPutS('NATIONAL IOD2', '}CubeAttributes', 'NATIONAL IOD2', 'Caption');
      if (0 = ViewExists('NATIONAL IOD2', 'All'));
         ViewCreate('NATIONAL IOD2', 'All');
         ViewRowDimensionSet('NATIONAL IOD2', 'All', 'Product Line', 1);
         if (1 = SubsetExists('Product Line', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'All', 'Product Line', 'All Members');
         endif;
         ViewColumnDimensionSet('NATIONAL IOD2', 'All', 'Product Item Name', 1);
         if (1 = SubsetExists('Product Item Name', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'All', 'Product Item Name', 'All Members');
         endif;
         ViewTitleDimensionSet('NATIONAL IOD2', 'All', 'Outlet');
         if (1 = SubsetExists('Outlet', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'All', 'Outlet', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'All', 'Outlet', 0);
         ViewTitleDimensionSet('NATIONAL IOD2', 'All', 'Market');
         if (1 = SubsetExists('Market', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'All', 'Market', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'All', 'Market', 0);
         ViewTitleDimensionSet('NATIONAL IOD2', 'All', 'NATIONAL IOD2.measures');
         if (1 = SubsetExists('NATIONAL IOD2.measures', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'All', 'NATIONAL IOD2.measures', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'All', 'NATIONAL IOD2.measures', 0);
      endif;
      if (0 = ViewExists('NATIONAL IOD2', 'NATIONAL IOD2'));
         ViewCreate('NATIONAL IOD2', 'NATIONAL IOD2');
         ViewRowDimensionSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Product Line', 1);
         if (1 = SubsetExists('Product Line', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'NATIONAL IOD2', 'Product Line', 'All Members');
         endif;
         ViewColumnDimensionSet('NATIONAL IOD2', 'NATIONAL IOD2', 'NATIONAL IOD2.measures', 1);
         if (1 = SubsetExists('NATIONAL IOD2.measures', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'NATIONAL IOD2', 'NATIONAL IOD2.measures', 'All Members');
         endif;
         ViewTitleDimensionSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Product Item Name');
         if (1 = SubsetExists('Product Item Name', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'NATIONAL IOD2', 'Product Item Name', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Product Item Name', 0);
         ViewTitleDimensionSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Outlet');
         if (1 = SubsetExists('Outlet', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'NATIONAL IOD2', 'Outlet', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Outlet', 0);
         ViewTitleDimensionSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Market');
         if (1 = SubsetExists('Market', 'All Members'));
            ViewSubsetAssign('NATIONAL IOD2', 'NATIONAL IOD2', 'Market', 'All Members');
         endif;
         ViewTitleElementSet('NATIONAL IOD2', 'NATIONAL IOD2', 'Market', 0);
      endif;
      CellPutS('NATIONAL IOD2.measures', '}CubeProperties', 'NATIONAL IOD2', 'MEASURES_DIMENSION');
   endif;
endif;
CellPutS('Product Line', '}DimensionAttributes', 'Product Line', 'Caption');
CellPutS('Product Item Name', '}DimensionAttributes', 'Product Item Name', 'Caption');
CellPutS('Outlet', '}DimensionAttributes', 'Outlet', 'Caption');
CellPutS('Market', '}DimensionAttributes', 'Market', 'Caption');
CellPutS('NATIONAL IOD2 Measures', '}DimensionAttributes', 'NATIONAL IOD2.measures', 'Caption');
#****End: Generated Header****

#****Begin: Generated Statements***
if (DIMIX('NATIONAL IOD2.measures', 'Revenue') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Revenue', 'n');
   AttrPutS('d:#,##0.###' | CHARW(12) | 'IC', 'NATIONAL IOD2.measures', 'Revenue', 'Format');
endif;
if (DIMIX('NATIONAL IOD2.measures', 'Cost') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Cost', 'n');
   AttrPutS('d:#,##0.##' | CHARW(12) | 'IC', 'NATIONAL IOD2.measures', 'Cost', 'Format');
endif;
if (DIMIX('NATIONAL IOD2.measures', 'Quantity') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Quantity', 'n');
   AttrPutS('d:#,##0.##' | CHARW(12) | 'IC', 'NATIONAL IOD2.measures', 'Quantity', 'Format');
endif;
if (DIMIX('NATIONAL IOD2.measures', 'Product Manufacture Date') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Product Manufacture Date', 'n');
   AttrPutS('d:yyyy-M-dd' | CHARW(12) | 'ICD', 'NATIONAL IOD2.measures', 'Product Manufacture Date', 'Format');
endif;
if (DIMIX('NATIONAL IOD2.measures', 'Product Time') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Product Time', 'n');
   AttrPutS('d:yyyy-M-dd' | CHARW(12) | 'ICD', 'NATIONAL IOD2.measures', 'Product Time', 'Format');
endif;
if (DIMIX('NATIONAL IOD2.measures', 'Product Sold Date') = 0);
   DimensionElementInsertDirect('NATIONAL IOD2.measures', '', 'Product Sold Date', 'n');
   AttrPutS('d:yyyy-M-dd' | CHARW(12) | 'ICD', 'NATIONAL IOD2.measures', 'Product Sold Date', 'Format');
endif;
DimensionSortOrder('Product Line', 'ByInput', 'ASCENDING', 'ByInput', 'ASCENDING');
DimensionSortOrder('Product Item Name', 'ByInput', 'ASCENDING', 'ByInput', 'ASCENDING');
DimensionSortOrder('Outlet', 'ByInput', 'ASCENDING', 'ByInput', 'ASCENDING');
DimensionSortOrder('Market', 'ByInput', 'ASCENDING', 'ByInput', 'ASCENDING');
DimensionSortOrder('NATIONAL IOD2.measures', '', '', 'ByInput', 'Ascending');
OldCubeLogChanges = CubeGetLogChanges('NATIONAL IOD2');
CubeSetLogChanges('NATIONAL IOD2', 0);
#****End: Generated Statements****
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Header****
If(Product_Line@='');
   Product_Line='Default Product Line';
EndIf;
If(Product_Item@='');
   Product_Item='Default Product Item';
EndIf;
If(Product_Brand@='');
   Product_Brand='Default Product Brand';
EndIf;
If(Outlet@='');
   Outlet='Default Outlet';
EndIf;
If(State@='');
   State='Default State';
EndIf;
If(Market@='');
   Market='Default Market';
EndIf;
#****End: Generated Header****

#****Begin: Generated Statements***
#BeginRegion parse date Product_Manufacture_Date_string using format d-MMM-yyyy

IF(Product_Manufacture_Date_string @= '');

	Product_Manufacture_Date = 0;

ELSE;

	Product_Manufacture_Date = ParseDate(Product_Manufacture_Date_string, 'd-MMM-yyyy');

	IF(ISUND(Product_Manufacture_Date)=1);

		ItemReject('Can not parse date:' | ' ' | Product_Manufacture_Date_string);

	ENDIF;

	#days between 1900/1/1 and 1960/1/1

	Product_Manufacture_Date = Product_Manufacture_Date + 21916;

ENDIF;

#EndRegion

#BeginRegion parse date Product_Time_string using format d-MMM-yyyy

IF(Product_Time_string @= '');

	Product_Time = 0;

ELSE;

	Product_Time = ParseDate(Product_Time_string, 'd-MMM-yyyy');

	IF(ISUND(Product_Time)=1);

		ItemReject('Can not parse date:' | ' ' | Product_Time_string);

	ENDIF;

	#days between 1900/1/1 and 1960/1/1

	Product_Time = Product_Time + 21916;

ENDIF;

#EndRegion

#BeginRegion parse date Product_Sold_Date_string using format d-MMM-yyyy

IF(Product_Sold_Date_string @= '');

	Product_Sold_Date = 0;

ELSE;

	Product_Sold_Date = ParseDate(Product_Sold_Date_string, 'd-MMM-yyyy');

	IF(ISUND(Product_Sold_Date)=1);

		ItemReject('Can not parse date:' | ' ' | Product_Sold_Date_string);

	ENDIF;

	#days between 1900/1/1 and 1960/1/1

	Product_Sold_Date = Product_Sold_Date + 21916;

ENDIF;

#EndRegion

DimensionElementInsertDirect('Product Line', '', Product_Line, 'n');
DimensionElementInsertDirect('Product Item Name', '', Product_Brand, 'c');
DimensionElementInsertDirect('Product Item Name', '', Product_Item, 'n');
DimensionElementInsertDirect('Outlet', '', State, 'c');
DimensionElementInsertDirect('Outlet', '', Outlet, 'n');
DimensionElementInsertDirect('Market', '', Market, 'n');
DimensionElementComponentAddDirect('Product Item Name', Product_Brand, Product_Item, 1.0);
DimensionElementComponentAddDirect('Outlet', State, Outlet, 1.0);
CellIncrementN(Revenue, 'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Revenue');
CellIncrementN(Cost, 'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Cost');
CellIncrementN(Quantity, 'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Quantity');
IF(CellGetN('NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Manufacture Date') < Product_Manufacture_Date); CellPutN(Product_Manufacture_Date,'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Manufacture Date');ENDIF;
IF(CellGetN('NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Time') < Product_Time); CellPutN(Product_Time,'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Time');ENDIF;
IF(CellGetN('NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Sold Date') < Product_Sold_Date); CellPutN(Product_Sold_Date,'NATIONAL IOD2', Product_Line, Product_Item, Outlet, Market, 'Product Sold Date');ENDIF;
ATTRPUTS(Product_Item_Name, 'Product Item Name', Product_Item, 'Caption', 1);
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
CubeSetLogChanges('NATIONAL IOD2', OldCubeLogChanges);
DimensionTopElementInsertDirect('Product Line', '', 'Total of Product Line');
DimensionUpdateDirect('Product Line');
DimensionTopElementInsertDirect('Product Item Name', '', 'Total of Product Item Name');
DimensionUpdateDirect('Product Item Name');
DimensionTopElementInsertDirect('Outlet', '', 'Total of Outlet');
DimensionUpdateDirect('Outlet');
DimensionTopElementInsertDirect('Market', '', 'Total of Market');
DimensionUpdateDirect('Market');
v_errMsgs = '';
if (DNLEV('Market') = 2);
   CellPutS('Total', '}HierarchyProperties', 'Market', 'hierarchy0', 'level000');
   CellPutS('Market', '}HierarchyProperties', 'Market', 'hierarchy0', 'level001');
elseif (DNLEV('Market') = 1);
   CellPutS('Market', '}HierarchyProperties', 'Market', 'hierarchy0', 'level000');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Market" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Market');
if (DNLEV('Outlet') = 3);
   CellPutS('Total', '}HierarchyProperties', 'Outlet', 'hierarchy0', 'level000');
   CellPutS('State', '}HierarchyProperties', 'Outlet', 'hierarchy0', 'level001');
   CellPutS('Outlet', '}HierarchyProperties', 'Outlet', 'hierarchy0', 'level002');
elseif (DNLEV('Outlet') = 2);
   CellPutS('State', '}HierarchyProperties', 'Outlet', 'hierarchy0', 'level000');
   CellPutS('Outlet', '}HierarchyProperties', 'Outlet', 'hierarchy0', 'level001');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Outlet" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Outlet');
if (DNLEV('Product Item Name') = 3);
   CellPutS('Total', '}HierarchyProperties', 'Product Item Name', 'hierarchy0', 'level000');
   CellPutS('Product Brand', '}HierarchyProperties', 'Product Item Name', 'hierarchy0', 'level001');
   CellPutS('Product Item', '}HierarchyProperties', 'Product Item Name', 'hierarchy0', 'level002');
elseif (DNLEV('Product Item Name') = 2);
   CellPutS('Product Brand', '}HierarchyProperties', 'Product Item Name', 'hierarchy0', 'level000');
   CellPutS('Product Item', '}HierarchyProperties', 'Product Item Name', 'hierarchy0', 'level001');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Product Item Name" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Product Item Name');
if (DNLEV('Product Line') = 2);
   CellPutS('Total', '}HierarchyProperties', 'Product Line', 'hierarchy0', 'level000');
   CellPutS('Product Line', '}HierarchyProperties', 'Product Line', 'hierarchy0', 'level001');
elseif (DNLEV('Product Line') = 1);
   CellPutS('Product Line', '}HierarchyProperties', 'Product Line', 'hierarchy0', 'level000');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Product Line" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Product Line');
IF(IMPORT_Cube_Created=1);
   CubeRuleAppend('NATIONAL IOD2', 'SKIPCHECK;');
   CubeRuleAppend('NATIONAL IOD2', '[''NATIONAL IOD2.measures'':''Product Manufacture Date''] = C:ConsolidatedMax(3, ''NATIONAL IOD2'', !Product Line,!Product Item Name,!Outlet,!Market,''Product Manufacture Date'');');
   CubeRuleAppend('NATIONAL IOD2', '[''NATIONAL IOD2.measures'':''Product Time''] = C:ConsolidatedMax(3, ''NATIONAL IOD2'', !Product Line,!Product Item Name,!Outlet,!Market,''Product Time'');');
   CubeRuleAppend('NATIONAL IOD2', '[''NATIONAL IOD2.measures'':''Product Sold Date''] = C:ConsolidatedMax(3, ''NATIONAL IOD2'', !Product Line,!Product Item Name,!Outlet,!Market,''Product Sold Date'');');
   CubeRuleAppend('NATIONAL IOD2', 'FEEDERS;');
ENDIF;
if (v_errMsgs @<> '');
   itemReject(v_errMsgs);
endif;
#****End: Generated Statements****
#endregion